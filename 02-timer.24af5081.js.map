{"mappings":"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","sources":["src/js/02-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport Notiflix from 'notiflix';\n\nconst refs = {\n  input: document.querySelector('#datetime-picker'),\n  button: document.querySelector('button[data-start]'),\n  field: document.querySelector('.field'),\n  restart: document.querySelector('.restart'),\n};\nconst { input, button, field, restart } = refs;\nlet endTime = null;\n\n// Options for flatpickr with call to timer handler function\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  enableSeconds: false,\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    endTime = selectedDates[0].getTime();\n    const currentTime = Date.now();\n    let deltaTime = endTime - currentTime;\n    let checkSeconds = Math.floor(deltaTime / 1000);\n    if (checkSeconds < 0) {\n      button.setAttribute('disabled', 'disabled');\n      Notiflix.Report.failure(\n        'Please choose a date in the future',\n        'Press the button to continue',\n        'Button'\n      );\n    } else {\n      button.hasAttribute('disabled')\n        ? button.toggleAttribute('disabled')\n        : button.removeAttribute('disabled');\n      timerHandler(endTime);\n    }\n  },\n};\n\n// Date picker interface initialization\n// const fp = flatpickr(input, options);\nconst dat = '#datetime-picker';\nconsole.log(dat);\nconsole.log(flatpickr(dat, options));\n\n// Timer handler function\nfunction timerHandler(endTime) {\n  class Timer {\n    constructor({ onTick }) {\n      this.intervalId = null;\n      this.isActive = false;\n      this.onTick = onTick;\n      this.init();\n    }\n\n    init() {\n      this.isActive = false;\n      const time = this.convertMs(0);\n      this.onTick(time);\n    }\n\n    start() {\n      if (this.isActive) return this.init();\n\n      button.setAttribute('disabled', 'disabled');\n      input.setAttribute('disabled', 'disabled');\n      restart.textContent = 'To restart the timer, you need to reload the page';\n\n      restart.style.backgroundColor = 'teal';\n      restart.style.fontSize = '24px';\n      restart.style.textAlign = 'center';\n      restart.style.maxWidth = '310px';\n      restart.style.color = 'white';\n\n      this.isActive = true;\n\n      this.intervalId = setInterval(() => {\n        const currentTime = Date.now();\n        let deltaTime = endTime - currentTime;\n        let checkSeconds = Math.round(deltaTime / 1000);\n        if (checkSeconds < 0 && !this.isActive) {\n          this.isActive = false;\n          Notiflix.Report.failure(\n            'Please reload the page',\n            'To start the timer',\n            ''\n          );\n        } else if (checkSeconds > 0 && this.isActive) {\n          this.isActive = true;\n          const time = this.convertMs(deltaTime);\n          this.onTick(time);\n        } else {\n          this.isActive = true;\n          this.init();\n          Notiflix.Report.success(\n            'Timer stopped',\n            'Press the button to continue',\n            'Button'\n          );\n          return;\n        }\n      }, 1000);\n    }\n\n    convertMs(timeMs) {\n      const second = 1000;\n      const minute = second * 60;\n      const hour = minute * 60;\n      const day = this.addLeadingZero(hour * 24);\n      const days = this.addLeadingZero(Math.floor(timeMs / day));\n      const hours = this.addLeadingZero(Math.floor((timeMs % day) / hour));\n      const minutes = this.addLeadingZero(\n        Math.floor(((timeMs % day) % hour) / minute)\n      );\n      const seconds = this.addLeadingZero(\n        Math.floor((((timeMs % day) % hour) % minute) / 1000)\n      );\n      return { days, hours, minutes, seconds };\n    }\n\n    addLeadingZero(value) {\n      return String(value).padStart(2, '0');\n    }\n  }\n\n  function updateClock({ days, hours, minutes, seconds }) {\n    field.firstElementChild.textContent = days;\n    field.nextElementSibling.firstElementChild.textContent = hours;\n    field.nextElementSibling.nextElementSibling.firstElementChild.textContent =\n      minutes;\n    field.nextElementSibling.nextElementSibling.nextElementSibling.firstElementChild.textContent =\n      seconds;\n  }\n\n  const timer = new Timer({\n    onTick: updateClock,\n  });\n\n  button.addEventListener('click', timer.start.bind(timer));\n}\n"],"names":["$fbklV","parcelRequire","$40d383fb392a7037$var$refs","input","document","querySelector","button","field","restart","$40d383fb392a7037$var$input","$40d383fb392a7037$var$button","$40d383fb392a7037$var$field","$40d383fb392a7037$var$restart","$40d383fb392a7037$var$endTime","$40d383fb392a7037$var$options","enableTime","time_24hr","defaultDate","Date","enableSeconds","minuteIncrement","onClose","selectedDates","getTime","currentTime","now","deltaTime","Math","floor","setAttribute","$parcel$interopDefault","$7Y9D8","Report","failure","hasAttribute","toggleAttribute","removeAttribute","endTime1","Timer","init","this","isActive","time","convertMs","onTick","start","textContent","style","backgroundColor","fontSize","textAlign","maxWidth","color","intervalId","setInterval","checkSeconds","round","success","timeMs","minute","hour","day","addLeadingZero","value","String","padStart","constructor","updateClock","days","hours","minutes","seconds","firstElementChild","nextElementSibling","timer","addEventListener","bind","$40d383fb392a7037$var$timerHandler","console","log","default"],"version":3,"file":"02-timer.24af5081.js.map"}