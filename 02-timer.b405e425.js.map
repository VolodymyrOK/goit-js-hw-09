{"mappings":"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","sources":["src/js/02-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport Notiflix from 'notiflix';\n\nconst refs = {\n  input: document.querySelector('#datetime-picker'),\n  button: document.querySelector('button[data-start]'),\n  field: document.querySelector('.field'),\n  restart: document.querySelector('.restart'),\n};\nconst { input, button, field, restart } = refs;\nlet endTime = null;\n\n// Options for flatpickr with call to timer handler function\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  enableSeconds: false,\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    endTime = selectedDates[0].getTime();\n    const currentTime = Date.now();\n    let deltaTime = endTime - currentTime;\n    let checkSeconds = Math.floor(deltaTime / 1000);\n    if (checkSeconds < 0) {\n      button.setAttribute('disabled', 'disabled');\n      Notiflix.Report.failure(\n        'Please choose a date in the future',\n        'Press the button to continue',\n        'Button'\n      );\n    } else {\n      button.hasAttribute('disabled')\n        ? button.toggleAttribute('disabled')\n        : button.removeAttribute('disabled');\n      timerHandler(endTime);\n    }\n  },\n};\n\n// Date picker interface initialization\n// const fp = flatpickr(input, options);\nflatpickr(input, options);\n\n// Timer handler function\nfunction timerHandler(endTime) {\n  class Timer {\n    constructor({ onTick }) {\n      this.intervalId = null;\n      this.isActive = false;\n      this.onTick = onTick;\n      this.init();\n    }\n\n    init() {\n      this.isActive = false;\n      const time = this.convertMs(0);\n      this.onTick(time);\n    }\n\n    start() {\n      if (this.isActive) return this.init();\n\n      button.setAttribute('disabled', 'disabled');\n      input.setAttribute('disabled', 'disabled');\n      restart.textContent = 'To restart the timer, you need to reload the page';\n\n      restart.style.backgroundColor = 'teal';\n      restart.style.fontSize = '24px';\n      restart.style.textAlign = 'center';\n      restart.style.maxWidth = '310px';\n      restart.style.color = 'white';\n\n      this.isActive = true;\n\n      this.intervalId = setInterval(() => {\n        const currentTime = Date.now();\n        let deltaTime = endTime - currentTime;\n        let checkSeconds = Math.round(deltaTime / 1000);\n        if (checkSeconds < 0 && !this.isActive) {\n          this.isActive = false;\n          Notiflix.Report.failure(\n            'Please reload the page',\n            'To start the timer',\n            ''\n          );\n        } else if (checkSeconds > 0 && this.isActive) {\n          this.isActive = true;\n          const time = this.convertMs(deltaTime);\n          this.onTick(time);\n        } else {\n          this.isActive = true;\n          this.init();\n          Notiflix.Report.success(\n            'Timer stopped',\n            'Press the button to continue',\n            'Button'\n          );\n          return;\n        }\n      }, 1000);\n    }\n\n    convertMs(timeMs) {\n      const second = 1000;\n      const minute = second * 60;\n      const hour = minute * 60;\n      const day = this.addLeadingZero(hour * 24);\n      const days = this.addLeadingZero(Math.floor(timeMs / day));\n      const hours = this.addLeadingZero(Math.floor((timeMs % day) / hour));\n      const minutes = this.addLeadingZero(\n        Math.floor(((timeMs % day) % hour) / minute)\n      );\n      const seconds = this.addLeadingZero(\n        Math.floor((((timeMs % day) % hour) % minute) / 1000)\n      );\n      return { days, hours, minutes, seconds };\n    }\n\n    addLeadingZero(value) {\n      return String(value).padStart(2, '0');\n    }\n  }\n\n  function updateClock({ days, hours, minutes, seconds }) {\n    field.firstElementChild.textContent = days;\n    field.nextElementSibling.firstElementChild.textContent = hours;\n    field.nextElementSibling.nextElementSibling.firstElementChild.textContent =\n      minutes;\n    field.nextElementSibling.nextElementSibling.nextElementSibling.firstElementChild.textContent =\n      seconds;\n  }\n\n  const timer = new Timer({\n    onTick: updateClock,\n  });\n\n  button.addEventListener('click', timer.start.bind(timer));\n}\n"],"names":["$8MBJY","parcelRequire","$84b9dae4df53835d$var$refs","input","document","querySelector","button","field","restart","$84b9dae4df53835d$var$input","$84b9dae4df53835d$var$button","$84b9dae4df53835d$var$field","$84b9dae4df53835d$var$restart","$84b9dae4df53835d$var$endTime","$84b9dae4df53835d$var$options","enableTime","time_24hr","defaultDate","Date","enableSeconds","minuteIncrement","onClose","selectedDates","getTime","currentTime","now","deltaTime","Math","floor","setAttribute","$parcel$interopDefault","$6JpON","Report","failure","hasAttribute","toggleAttribute","removeAttribute","endTime1","Timer1","Timer","param","onTick","this","intervalId","isActive","init","key","time","convertMs","textContent","style","backgroundColor","fontSize","textAlign","maxWidth","color","setInterval","checkSeconds","round","_this","success","timeMs","minute","hour","day","addLeadingZero","days","hours","minutes","seconds","value","String","padStart","updateClock","firstElementChild","nextElementSibling","timer","addEventListener","start","bind","$84b9dae4df53835d$var$timerHandler","$dbdyf","default"],"version":3,"file":"02-timer.b405e425.js.map"}