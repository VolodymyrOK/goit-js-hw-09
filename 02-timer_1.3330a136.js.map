{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,S,aAIA,MAAMC,EAAO,CACXC,MAAOC,SAASC,cAAc,oBAC9BC,YAAaF,SAASC,cAAc,gBACpCE,WAAYH,SAASC,cAAc,eACnCG,MAAOJ,SAASC,cAAc,YAE1BF,MAAEM,EAAKH,YAAEI,EAAWH,WAAEI,EAAUH,MAAEI,GAAUV,EAClD,IAAIW,EAAa,KAEjB,MAAMC,EAAU,CACdC,YAAY,EACZC,WAAW,EACXC,YAAa,IAAIC,KACjBC,eAAe,EACfC,gBAAiB,EACjBC,QAAQC,GACN,MAAMC,EAAcL,KAAKM,MACrBF,EAAc,GAAKC,EACrBE,EAAAC,GAASC,OAAOC,QACd,qCACA,+BACA,UAGFlB,EAAYmB,aAAa,YACrBnB,EAAYoB,gBAAgB,YAC5BpB,EAAYqB,gBAAgB,YAElClB,EAAaS,EAAc,E,IAIpB,EAAAtB,EAAAgC,SAAUvB,EAAOK,GA+E5B,MAAMmB,EAAQ,IA7Ed,MAQEC,OACEC,KAAKC,UAAW,EAChB,MAAMC,EAAOF,KAAKG,UAAU,GAC5BH,KAAKI,OAAOF,E,CAGdG,QACE,GAAIL,KAAKC,SAAU,OAAOD,KAAKD,OAE/BxB,EAAY+B,aAAa,WAAY,IACrC9B,EAAWoB,gBAAgB,YAC3BI,KAAKC,UAAW,EAEhBD,KAAKO,QAAUC,aAAY,KACzB,MAAMpB,EAAc,IAAIL,KACxB,GAAI0B,OAAO/B,IAAe+B,OAAOrB,IAAgBY,KAAKC,SAQpD,OAPAD,KAAKC,UAAW,EAChBD,KAAKU,YACLpB,EAAAC,GAASC,OAAOmB,QACd,gBACA,+BACA,UAIJX,KAAKC,UAAW,EAChB,MAAMC,EAAOF,KAAKG,UAAUzB,EAAaK,KAAKM,OAC9CW,KAAKI,OAAOF,EAAK,GAChB,I,CAELQ,OAIE,GAHAnC,EAAYqB,gBAAgB,WAAY,IACxCpB,EAAW8B,aAAa,WAAY,IACpCM,cAAcZ,KAAKO,UACdP,KAAKC,SAER,OADAD,KAAKC,UAAW,EACTD,KAAKD,M,CAGhBI,UAAUU,GACR,MACMC,EAASC,IACTC,EAAOF,KACPG,EAAMjB,KAAKkB,eAAsB,GAAPF,GAShC,MAAO,C,KARMhB,KAAKkB,eAAeC,KAAKC,MAAMP,EAASI,I,MACvCjB,KAAKkB,eAAeC,KAAKC,MAAMP,EAAUI,EAAOD,I,QAC9ChB,KAAKkB,eACnBC,KAAKC,MAAMP,EAAWI,EAAOD,EAAQF,I,QAEvBd,KAAKkB,eACnBC,KAAKC,MAAMP,EAAYI,EAAOD,EAAQF,EAAU,M,CAKpDI,eAAeG,GACb,OAAOZ,OAAOY,GAAOC,SAAS,EAAG,I,CA/DnCC,aAAYnB,OAAEA,IACZJ,KAAKO,QAAU,KACfP,KAAKC,UAAW,EAChBD,KAAKI,OAASA,EACdJ,KAAKD,M,GAwEe,CACtBK,OAVF,UAAqBoB,KAAEA,EAAIC,MAAEA,EAAKC,QAAEA,EAAOC,QAAEA,IAC3ClD,EAAMmD,kBAAkBC,YAAcL,EACtC/C,EAAMqD,mBAAmBF,kBAAkBC,YAAcJ,EACzDhD,EAAMqD,mBAAmBA,mBAAmBF,kBAAkBC,YAC5DH,EACFjD,EAAMqD,mBAAmBA,mBAAmBA,mBAAmBF,kBAAkBC,YAC/EF,C,IAOJpD,EAAYwD,iBAAiB,QAASjC,EAAMO,MAAM2B,KAAKlC,IACvDtB,EAAWuD,iBAAiB,QAASjC,EAAMY,KAAKsB,KAAKlC","sources":["src/js/02-timer_1.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport Notiflix from 'notiflix';\n\nconst refs = {\n  input: document.querySelector('#datetime-picker'),\n  buttonStart: document.querySelector('[data-start]'),\n  buttonStop: document.querySelector('[data-stop]'),\n  field: document.querySelector('.field'),\n};\nconst { input, buttonStart, buttonStop, field } = refs;\nlet targetDate = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  enableSeconds: false,\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const currentDate = Date.now();\n    if (selectedDates[0] < currentDate) {\n      Notiflix.Report.failure(\n        'Please choose a date in the future',\n        'Press the button to continue',\n        'Button'\n      );\n    } else {\n      buttonStart.hasAttribute('disabled')\n        ? buttonStart.toggleAttribute('disabled')\n        : buttonStart.removeAttribute('disabled');\n    }\n    targetDate = selectedDates[0];\n  },\n};\n\nconst fp = flatpickr(input, options);\n\nclass Timer {\n  constructor({ onTick }) {\n    this.timerId = null;\n    this.isActive = false;\n    this.onTick = onTick;\n    this.init();\n  }\n\n  init() {\n    this.isActive = false;\n    const time = this.convertMs(0);\n    this.onTick(time);\n  }\n\n  start() {\n    if (this.isActive) return this.init();\n\n    buttonStart.setAttribute('disabled', '');\n    buttonStop.removeAttribute('disabled');\n    this.isActive = true;\n\n    this.timerId = setInterval(() => {\n      const currentDate = new Date();\n      if (String(targetDate) <= String(currentDate) && this.isActive) {\n        this.isActive = false;\n        this.stop();\n        Notiflix.Report.success(\n          'Timer stopped',\n          'Press the button to continue',\n          'Button'\n        );\n        return;\n      }\n      this.isActive = true;\n      const time = this.convertMs(targetDate - Date.now());\n      this.onTick(time);\n    }, 1000);\n  }\n  stop() {\n    buttonStart.removeAttribute('disabled', '');\n    buttonStop.setAttribute('disabled', '');\n    clearInterval(this.timerId);\n    if (!this.isActive) {\n      this.isActive = true;\n      return this.init();\n    }\n  }\n  convertMs(timeMs) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = this.addLeadingZero(hour * 24);\n    const days = this.addLeadingZero(Math.floor(timeMs / day));\n    const hours = this.addLeadingZero(Math.floor((timeMs % day) / hour));\n    const minutes = this.addLeadingZero(\n      Math.floor(((timeMs % day) % hour) / minute)\n    );\n    const seconds = this.addLeadingZero(\n      Math.floor((((timeMs % day) % hour) % minute) / 1000)\n    );\n    return { days, hours, minutes, seconds };\n  }\n\n  addLeadingZero(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nfunction updateClock({ days, hours, minutes, seconds }) {\n  field.firstElementChild.textContent = days;\n  field.nextElementSibling.firstElementChild.textContent = hours;\n  field.nextElementSibling.nextElementSibling.firstElementChild.textContent =\n    minutes;\n  field.nextElementSibling.nextElementSibling.nextElementSibling.firstElementChild.textContent =\n    seconds;\n}\n\nconst timer = new Timer({\n  onTick: updateClock,\n});\n\nbuttonStart.addEventListener('click', timer.start.bind(timer));\nbuttonStop.addEventListener('click', timer.stop.bind(timer));\n"],"names":["$fbklV","parcelRequire","$3ffb4e0fbc79ed72$var$refs","input","document","querySelector","buttonStart","buttonStop","field","$3ffb4e0fbc79ed72$var$input","$3ffb4e0fbc79ed72$var$buttonStart","$3ffb4e0fbc79ed72$var$buttonStop","$3ffb4e0fbc79ed72$var$field","$3ffb4e0fbc79ed72$var$targetDate","$3ffb4e0fbc79ed72$var$options","enableTime","time_24hr","defaultDate","Date","enableSeconds","minuteIncrement","onClose","selectedDates","currentDate","now","$parcel$interopDefault","$7Y9D8","Report","failure","hasAttribute","toggleAttribute","removeAttribute","default","$3ffb4e0fbc79ed72$var$timer","init","this","isActive","time","convertMs","onTick","start","setAttribute","timerId","setInterval","String","stop","success","clearInterval","timeMs","minute","second","hour","day","addLeadingZero","Math","floor","value","padStart","constructor","days","hours","minutes","seconds","firstElementChild","textContent","nextElementSibling","addEventListener","bind"],"version":3,"file":"02-timer_1.3330a136.js.map"}